// This file is part of libigl, a simple c++ geometry processing library.
//
// Copyright (C) 2013 Alec Jacobson <alecjacobson@gmail.com>
//
// This Source Code Form is subject to the terms of the Mozilla Public License
// v. 2.0. If a copy of the MPL was not distributed with this file, You can
// obtain one at http://mozilla.org/MPL/2.0/.
#include "colon.h"
#include "LinSpaced.h"

#include <cstdio>

template <typename L,typename S,typename H,typename T>
IGLAABB_INLINE void iglaabb::colon(
  const L low,
  const S step,
  const H hi,
  Eigen::Matrix<T,Eigen::Dynamic,1> & I)
{
  const H size = ((hi-low)/step)+1;
  I = iglaabb::LinSpaced<Eigen::Matrix<T,Eigen::Dynamic,1> >(size,low,low+step*(size-1));
}

template <typename L,typename H,typename T>
IGLAABB_INLINE void iglaabb::colon(
  const L low,
  const H hi,
  Eigen::Matrix<T,Eigen::Dynamic,1> & I)
{
  return iglaabb::colon(low,(T)1,hi,I);
}

template <typename T,typename L,typename H>
IGLAABB_INLINE Eigen::Matrix<T,Eigen::Dynamic,1> iglaabb::colon(
  const L low,
  const H hi)
{
  Eigen::Matrix<T,Eigen::Dynamic,1> I;
  iglaabb::colon(low,hi,I);
  return I;
}

#ifdef IGLAABB_STATIC_LIBRARY
// Explicit template instantiation
// generated by autoexplicit.sh
template Eigen::Matrix<int, -1, 1, 0, -1, 1> iglaabb::colon<int, int, int>(int, int);
template Eigen::Matrix<int, -1, 1, 0, -1, 1> iglaabb::colon<int, int, long>(int, long);
template Eigen::Matrix<int, -1, 1, 0, -1, 1> iglaabb::colon<int, int, long long int>(int, long long int);
template Eigen::Matrix<double, -1, 1, 0, -1, 1> iglaabb::colon<double, double, double>(double, double);
template void iglaabb::colon<int, long, double>(int, long, Eigen::Matrix<double, -1, 1, 0, -1, 1> &);
// generated by autoexplicit.sh
template void iglaabb::colon<int, long, int, int>(int, long, int, Eigen::Matrix<int, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, int, long, int>(int, int, long, Eigen::Matrix<int, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, long, int>(int, long, Eigen::Matrix<int, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, int, int>(int, int, Eigen::Matrix<int, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, long long int, int>(int, long long int, Eigen::Matrix<int, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, int, int, int>(int, int, int, Eigen::Matrix<int, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, long, long>(int, long, Eigen::Matrix<long, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, double, double, double>(int, double, double, Eigen::Matrix<double, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<double, double, double>(double, double, Eigen::Matrix<double, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<double, double, double, double>(double, double, double, Eigen::Matrix<double, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, int, long>(int, int, Eigen::Matrix<long, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, int, double>(int, int, Eigen::Matrix<double, -1, 1, 0, -1, 1> &);
#ifdef WIN32
template void iglaabb::colon<int, __int64, double>(int, __int64, class Eigen::Matrix<double, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, long long, long>(int, long long, class Eigen::Matrix<long, -1, 1, 0, -1, 1> &);
template void iglaabb::colon<int, __int64, __int64>(int, __int64, class Eigen::Matrix<__int64, -1, 1, 0, -1, 1> &);
#endif
#endif
